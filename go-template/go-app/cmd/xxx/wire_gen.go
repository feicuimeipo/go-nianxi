// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"gitee.com/go-nianxi/go-common/pkg/app"
	"gitee.com/go-nianxi/go-common/pkg/base"
	"gitee.com/go-nianxi/go-template/internal/xxx"
	"gitee.com/go-nianxi/go-template/internal/xxx/config"
	"gitee.com/go-nianxi/go-template/internal/xxx/dao"
	"gitee.com/go-nianxi/go-template/internal/xxx/grpcservice"
	"gitee.com/go-nianxi/go-template/internal/xxx/router"
	"gitee.com/go-nianxi/go-template/internal/xxx/service"
	"github.com/google/wire"
)

// Injectors from wire.go:

func CreateApp(cf string) (*app.Application, error) {
	viper := base.InitViper(cf)
	baseConf := base.NewAppBase(viper)
	logger := config.NewLogger(baseConf)
	iCache := config.NewCache(viper, logger)
	db := config.NewDB(viper, logger)
	daoDao := dao.New(db)
	validator := config.NewValidator(viper, logger)
	serviceService := service.New(iCache, daoDao, validator)
	routerRouter := router.NewRouter(serviceService, validator)
	tracer := config.NewJaeger(viper, logger)
	client := config.NewEtcd(viper, logger)
	server := router.NewHttpServer(baseConf, routerRouter, tracer, client)
	sugaredLogger := config.NewSugaredLogger(baseConf)
	initServers := grpcservice.RegisterService(serviceService, iCache, sugaredLogger)
	grpcServer, err := grpcservice.NewGrpcServer(baseConf, initServers, tracer, client)
	if err != nil {
		return nil, err
	}
	application, err := xxx.NewApp(cf, server, grpcServer, logger)
	if err != nil {
		return nil, err
	}
	return application, nil
}

// wire.go:

var providerSet = wire.NewSet(config.ProviderSet, dao.ProviderSet, service.ProviderSet, grpcservice.ProviderSet, router.ProviderSet, xxx.ProviderSet)
